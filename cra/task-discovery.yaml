---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-discovery
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: commit-id
      description: git commit id
    - name: commit-timestamp
      description: git commit timestamp
    - name: directory-name
      description: directory name where the repository is cloned
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "0"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-environment
      description: Name of the configmap containing the continuous delivery pipeline context environment properties
      default: environment-properties

  results:
    - name: status
      description: status of discovery task, possible value are-success|failure

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: discovery
      image: us.icr.io/gitsecure/discovery-task:1.1.0
      imagePullPolicy: Always
      workingDir: "/artifacts"
      command: ["/bin/sh", "-c"]
      env:
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /artifacts
      args:
        - |
          #!/bin/sh
          if [ "$PIPELINE_DEBUG" = "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          REPO_DIR_PATH="/artifacts/$(params.directory-name)"

          gitsecureUrl="http://172.21.217.249:9950"

          if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
            echo ""
            echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
            exit 1
          fi

          # create a dry-run k8s secret of type docker-registry to obtain 
          # the pull secrets for the base image used in the dockerfile
          # this is optional, but sometimes useful, for example when using
          # UBI images from RedHat
           
          if [ -f "/properties/build-baseimage-auth-user" ] \
            && [ -f "/secrets/build-baseimage-auth-password" ] \
            && [ -f "/properties/build-baseimage-auth-host" ]; then

            echo "Adding pull secrets to access base image registry $(cat /properties/build-baseimage-auth-host)"

            kubectl create secret --dry-run=client --output=json \
              docker-registry registry-dockerconfig-secret \
              --docker-username="$(cat /properties/build-baseimage-auth-user)" \
              --docker-password="$(cat /secrets/build-baseimage-auth-password)" \
              --docker-server="$(cat /properties/build-baseimage-auth-host)" \
              --docker-email="$(cat /properties/build-baseimage-auth-email)" | \
              jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json

            # build_baseimage_auth="$(jq -r -c \
            #   --arg host "$(cat /properties/build-baseimage-auth-host)" \
            #   '.auths[$host]' \
            #   build-baseimage-auth.json)"
            # echo "$(jq -r -c \
            #   --arg host "$(cat /properties/build-baseimage-auth-host)" \
            #   --argjson data "${build_baseimage_auth}" \
            #   '.auths[$host] = $data' \
            #   config.json)" > config.json
          fi

          /usr/local/bin/discovery \
            -giturl "$(params.repository)" \
            -gitbranch "$(params.revision)" \
            -repodir $REPO_DIR_PATH  \
            -rigapi "${gitsecureUrl}" \
            -commitid "$(params.commit-id)" \
            -commitTimestamp "$(params.commit-timestamp)" 

      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /var/run/
          name: docker-socket
        - mountPath: /properties
          name: environment-properties
        - mountPath: /secrets
          name: secure-properties    

  sidecars:
    - image: docker:19.03-dind
      name: server
      securityContext:
        privileged: true
      env:
        # enable BUILDKIT Option
        - name: DOCKER_BUILDKIT
          value: 1
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      volumeMounts:
        - mountPath: /var/run/
          name: docker-socket
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
    - name: docker-socket
      emptyDir: {}
    - name: environment-properties
      configMap:
        name: $(params.continuous-delivery-context-environment)
    - name: secure-properties
      secret:
        secretName: $(params.continuous-delivery-context-secret)
